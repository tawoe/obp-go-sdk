/*
 * Open Bank Project API
 *
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2024. Licensed under the AGPL and commercial licences.
 *
 * API version: v5.1.0
 * Contact: contact@tesobe.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package obp_golang

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type DynamicEntityApiService service

/*
DynamicEntityApiService Create new Covid APIDays
&lt;p&gt;Create new Covid APIDays.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;CovidAPIDays&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20013CovidApiDaysList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateCovidAPIDays(ctx context.Context, body Body6) (InlineResponse20013CovidApiDaysList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20013CovidApiDaysList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CovidAPIDays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20013CovidApiDaysList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new D Entity1
&lt;p&gt;Create new D Entity1.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;D-Entity1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20017Dentity1List
*/
func (a *DynamicEntityApiService) DynamicEntityCreateDEntity1Gh29Uk(ctx context.Context, body Body18) (InlineResponse20017Dentity1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20017Dentity1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/D-Entity1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20017Dentity1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Fish Port
&lt;p&gt;Create new Fish Port.&lt;/p&gt;&lt;p&gt;Portfolio of fishbased values&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;fish: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FishPort&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20014FishPortList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateFishPort(ctx context.Context, body Body9) (InlineResponse20014FishPortList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20014FishPortList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FishPort"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20014FishPortList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Foo Bar
&lt;p&gt;Create new Foo Bar.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FooBar&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20015FooBarList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateFooBar(ctx context.Context, body Body12) (InlineResponse20015FooBarList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20015FooBarList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FooBar"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20015FooBarList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Insurance Policy
&lt;p&gt;Create new Insurance Policy.&lt;/p&gt;&lt;p&gt;Which insurance policies the customer already has.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePolicy&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20018InsurancePolicyList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateInsurancePolicyGh29Uk(ctx context.Context, body Body21) (InlineResponse20018InsurancePolicyList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20018InsurancePolicyList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20018InsurancePolicyList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Insurance Premium
&lt;p&gt;Create new Insurance Premium.&lt;/p&gt;&lt;p&gt;Retrive the premium for the customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePremium&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20019InsurancePremiumList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateInsurancePremiumGh29Uk(ctx context.Context, body Body24) (InlineResponse20019InsurancePremiumList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20019InsurancePremiumList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePremium"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20019InsurancePremiumList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new March Hare
&lt;p&gt;Create new March Hare.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;MarchHare&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20020MarchHareList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateMarchHareGh29Uk(ctx context.Context, body Body27) (InlineResponse20020MarchHareList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20020MarchHareList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/MarchHare"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20020MarchHareList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new My Test Daniel707
&lt;p&gt;Create new My Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityCreateMytestDaniel707(ctx context.Context, body Body39) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Obp Activity
&lt;p&gt;Create new Obp Activity.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;username: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;created_date: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;ObpActivity&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20022ObpActivityList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateObpActivityObpTesting01(ctx context.Context, body Body33) (InlineResponse20022ObpActivityList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20022ObpActivityList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/obp.testing.01/ObpActivity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20022ObpActivityList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Odometer
&lt;p&gt;Create new Odometer.&lt;/p&gt;&lt;p&gt;Verify odometer information for flexible contracts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;Odometer&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20021OdometerList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateOdometerGh29Uk(ctx context.Context, body Body30) (InlineResponse20021OdometerList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20021OdometerList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/Odometer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20021OdometerList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Simon Covid
&lt;p&gt;Create new Simon Covid.&lt;/p&gt;&lt;p&gt;Let&#39;s put Covid99 stuff here&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;SimonCovid&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20016SimonCovidList
*/
func (a *DynamicEntityApiService) DynamicEntityCreateSimonCovid(ctx context.Context, body Body15) (InlineResponse20016SimonCovidList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20016SimonCovidList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/SimonCovid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20016SimonCovidList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Customer Cars
&lt;p&gt;Create new Customer Cars.&lt;/p&gt;&lt;p&gt;The car the customer arrived in&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;customer_identifier: description of &lt;strong&gt;customer_identifier&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;manufacturer: description of &lt;strong&gt;manufacturer&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;customer_cars&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20023CustomerCarsList
*/
func (a *DynamicEntityApiService) DynamicEntityCreatecustomerCars(ctx context.Context, body Body36) (InlineResponse20023CustomerCarsList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20023CustomerCarsList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/customer_cars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20023CustomerCarsList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Sustrans
&lt;p&gt;Create new Sustrans.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;sustrans&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20025SustransList
*/
func (a *DynamicEntityApiService) DynamicEntityCreatesustrans(ctx context.Context, body Body42) (InlineResponse20025SustransList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20025SustransList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sustrans"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20025SustransList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Test1
&lt;p&gt;Create new Test1.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20026Test1List
*/
func (a *DynamicEntityApiService) DynamicEntityCreatetest1(ctx context.Context, body Body45) (InlineResponse20026Test1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20026Test1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20026Test1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Create new Test Daniel707
&lt;p&gt;Create new Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityCreatetestDaniel707(ctx context.Context, body Body48) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Covid APIDays by id
&lt;p&gt;Delete Covid APIDays by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;CovidAPIDays&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20013CovidApiDaysList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteCovidAPIDays(ctx context.Context, body Body8) (InlineResponse20013CovidApiDaysList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20013CovidApiDaysList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CovidAPIDays/COVID_API_DAYS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20013CovidApiDaysList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete D Entity1 by id
&lt;p&gt;Delete D Entity1 by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;D-Entity1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20017Dentity1List
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteDEntity1Gh29Uk(ctx context.Context, body Body20) (InlineResponse20017Dentity1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20017Dentity1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/D-Entity1/D-ENTITY1_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20017Dentity1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Fish Port by id
&lt;p&gt;Delete Fish Port by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FishPort&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20014FishPortList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteFishPort(ctx context.Context, body Body11) (InlineResponse20014FishPortList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20014FishPortList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FishPort/FISH_PORT_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20014FishPortList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Foo Bar by id
&lt;p&gt;Delete Foo Bar by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FooBar&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20015FooBarList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteFooBar(ctx context.Context, body Body14) (InlineResponse20015FooBarList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20015FooBarList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FooBar/FOO_BAR_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20015FooBarList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Insurance Policy by id
&lt;p&gt;Delete Insurance Policy by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePolicy&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20018InsurancePolicyList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteInsurancePolicyGh29Uk(ctx context.Context, body Body23) (InlineResponse20018InsurancePolicyList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20018InsurancePolicyList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePolicy/INSURANCE_POLICY_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20018InsurancePolicyList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Insurance Premium by id
&lt;p&gt;Delete Insurance Premium by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePremium&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20019InsurancePremiumList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteInsurancePremiumGh29Uk(ctx context.Context, body Body26) (InlineResponse20019InsurancePremiumList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20019InsurancePremiumList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePremium/INSURANCE_PREMIUM_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20019InsurancePremiumList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete March Hare by id
&lt;p&gt;Delete March Hare by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;MarchHare&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20020MarchHareList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteMarchHareGh29Uk(ctx context.Context, body Body29) (InlineResponse20020MarchHareList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20020MarchHareList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/MarchHare/MARCH_HARE_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20020MarchHareList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete My Test Daniel707 by id
&lt;p&gt;Delete My Test Daniel707 by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteMytestDaniel707(ctx context.Context, body Body41) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Obp Activity by id
&lt;p&gt;Delete Obp Activity by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;ObpActivity&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20022ObpActivityList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteObpActivityObpTesting01(ctx context.Context, body Body35) (InlineResponse20022ObpActivityList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20022ObpActivityList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/obp.testing.01/ObpActivity/OBP_ACTIVITY_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20022ObpActivityList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Odometer by id
&lt;p&gt;Delete Odometer by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;Odometer&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20021OdometerList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteOdometerGh29Uk(ctx context.Context, body Body32) (InlineResponse20021OdometerList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20021OdometerList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/Odometer/ODOMETER_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20021OdometerList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Simon Covid by id
&lt;p&gt;Delete Simon Covid by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;SimonCovid&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20016SimonCovidList
*/
func (a *DynamicEntityApiService) DynamicEntityDeleteSimonCovid(ctx context.Context, body Body17) (InlineResponse20016SimonCovidList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20016SimonCovidList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/SimonCovid/SIMON_COVID_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20016SimonCovidList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Customer Cars by id
&lt;p&gt;Delete Customer Cars by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;customer_cars&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20023CustomerCarsList
*/
func (a *DynamicEntityApiService) DynamicEntityDeletecustomerCars(ctx context.Context, body Body38) (InlineResponse20023CustomerCarsList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20023CustomerCarsList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/customer_cars/CUSTOMER_CARS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20023CustomerCarsList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Sustrans by id
&lt;p&gt;Delete Sustrans by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;sustrans&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20025SustransList
*/
func (a *DynamicEntityApiService) DynamicEntityDeletesustrans(ctx context.Context, body Body44) (InlineResponse20025SustransList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20025SustransList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sustrans/SUSTRANS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20025SustransList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Test1 by id
&lt;p&gt;Delete Test1 by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20026Test1List
*/
func (a *DynamicEntityApiService) DynamicEntityDeletetest1(ctx context.Context, body Body47) (InlineResponse20026Test1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20026Test1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test1/TEST1_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20026Test1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Delete Test Daniel707 by id
&lt;p&gt;Delete Test Daniel707 by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityDeletetestDaniel707(ctx context.Context, body Body50) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Covid APIDays List
&lt;p&gt;Get Covid APIDays List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;CovidAPIDays&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /CovidAPIDays?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20013
*/
func (a *DynamicEntityApiService) DynamicEntityGetCovidAPIDaysList(ctx context.Context) (InlineResponse20013, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20013
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CovidAPIDays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20013
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get D Entity1 List
&lt;p&gt;Get D Entity1 List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;D-Entity1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /D-Entity1?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20017
*/
func (a *DynamicEntityApiService) DynamicEntityGetDEntity1ListGh29Uk(ctx context.Context) (InlineResponse20017, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20017
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/D-Entity1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20017
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Fish Port List
&lt;p&gt;Get Fish Port List.&lt;/p&gt;&lt;p&gt;Portfolio of fishbased values&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;fish: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FishPort&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /FishPort?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20014
*/
func (a *DynamicEntityApiService) DynamicEntityGetFishPortList(ctx context.Context) (InlineResponse20014, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20014
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FishPort"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20014
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Foo Bar List
&lt;p&gt;Get Foo Bar List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FooBar&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /FooBar?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20015
*/
func (a *DynamicEntityApiService) DynamicEntityGetFooBarList(ctx context.Context) (InlineResponse20015, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20015
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FooBar"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20015
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Insurance Policy List
&lt;p&gt;Get Insurance Policy List.&lt;/p&gt;&lt;p&gt;Which insurance policies the customer already has.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePolicy&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /InsurancePolicy?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20018
*/
func (a *DynamicEntityApiService) DynamicEntityGetInsurancePolicyListGh29Uk(ctx context.Context) (InlineResponse20018, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20018
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePolicy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20018
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Insurance Premium List
&lt;p&gt;Get Insurance Premium List.&lt;/p&gt;&lt;p&gt;Retrive the premium for the customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePremium&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /InsurancePremium?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20019
*/
func (a *DynamicEntityApiService) DynamicEntityGetInsurancePremiumListGh29Uk(ctx context.Context) (InlineResponse20019, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20019
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePremium"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20019
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get March Hare List
&lt;p&gt;Get March Hare List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;MarchHare&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /MarchHare?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20020
*/
func (a *DynamicEntityApiService) DynamicEntityGetMarchHareListGh29Uk(ctx context.Context) (InlineResponse20020, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20020
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/MarchHare"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20020
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get My Test Daniel707 List
&lt;p&gt;Get My Test Daniel707 List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /test_daniel707?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024
*/
func (a *DynamicEntityApiService) DynamicEntityGetMytestDaniel707List(ctx context.Context) (InlineResponse20024, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Obp Activity List
&lt;p&gt;Get Obp Activity List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;username: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;created_date: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;ObpActivity&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /ObpActivity?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20022
*/
func (a *DynamicEntityApiService) DynamicEntityGetObpActivityListObpTesting01(ctx context.Context) (InlineResponse20022, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20022
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/obp.testing.01/ObpActivity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20022
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Odometer List
&lt;p&gt;Get Odometer List.&lt;/p&gt;&lt;p&gt;Verify odometer information for flexible contracts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;Odometer&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /Odometer?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20021
*/
func (a *DynamicEntityApiService) DynamicEntityGetOdometerListGh29Uk(ctx context.Context) (InlineResponse20021, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20021
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/Odometer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20021
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Simon Covid List
&lt;p&gt;Get Simon Covid List.&lt;/p&gt;&lt;p&gt;Let&#39;s put Covid99 stuff here&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;SimonCovid&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /SimonCovid?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20016
*/
func (a *DynamicEntityApiService) DynamicEntityGetSimonCovidList(ctx context.Context) (InlineResponse20016, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20016
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/SimonCovid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Covid APIDays by id
&lt;p&gt;Get Covid APIDays by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;CovidAPIDays&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20013CovidApiDaysList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleCovidAPIDays(ctx context.Context) (InlineResponse20013CovidApiDaysList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20013CovidApiDaysList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CovidAPIDays/COVID_API_DAYS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20013CovidApiDaysList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get D Entity1 by id
&lt;p&gt;Get D Entity1 by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;D-Entity1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20017Dentity1List
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleDEntity1Gh29Uk(ctx context.Context) (InlineResponse20017Dentity1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20017Dentity1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/D-Entity1/D-ENTITY1_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20017Dentity1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Fish Port by id
&lt;p&gt;Get Fish Port by id.&lt;/p&gt;&lt;p&gt;Portfolio of fishbased values&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;fish: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FishPort&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20014FishPortList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleFishPort(ctx context.Context) (InlineResponse20014FishPortList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20014FishPortList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FishPort/FISH_PORT_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20014FishPortList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Foo Bar by id
&lt;p&gt;Get Foo Bar by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FooBar&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20015FooBarList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleFooBar(ctx context.Context) (InlineResponse20015FooBarList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20015FooBarList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FooBar/FOO_BAR_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20015FooBarList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Insurance Policy by id
&lt;p&gt;Get Insurance Policy by id.&lt;/p&gt;&lt;p&gt;Which insurance policies the customer already has.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePolicy&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20018InsurancePolicyList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleInsurancePolicyGh29Uk(ctx context.Context) (InlineResponse20018InsurancePolicyList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20018InsurancePolicyList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePolicy/INSURANCE_POLICY_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20018InsurancePolicyList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Insurance Premium by id
&lt;p&gt;Get Insurance Premium by id.&lt;/p&gt;&lt;p&gt;Retrive the premium for the customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePremium&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20019InsurancePremiumList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleInsurancePremiumGh29Uk(ctx context.Context) (InlineResponse20019InsurancePremiumList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20019InsurancePremiumList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePremium/INSURANCE_PREMIUM_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20019InsurancePremiumList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get March Hare by id
&lt;p&gt;Get March Hare by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;MarchHare&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20020MarchHareList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleMarchHareGh29Uk(ctx context.Context) (InlineResponse20020MarchHareList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20020MarchHareList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/MarchHare/MARCH_HARE_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20020MarchHareList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get My Test Daniel707 by id
&lt;p&gt;Get My Test Daniel707 by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleMytestDaniel707(ctx context.Context) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Obp Activity by id
&lt;p&gt;Get Obp Activity by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;username: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;created_date: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;ObpActivity&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20022ObpActivityList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleObpActivityObpTesting01(ctx context.Context) (InlineResponse20022ObpActivityList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20022ObpActivityList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/obp.testing.01/ObpActivity/OBP_ACTIVITY_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20022ObpActivityList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Odometer by id
&lt;p&gt;Get Odometer by id.&lt;/p&gt;&lt;p&gt;Verify odometer information for flexible contracts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;Odometer&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20021OdometerList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleOdometerGh29Uk(ctx context.Context) (InlineResponse20021OdometerList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20021OdometerList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/Odometer/ODOMETER_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20021OdometerList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Simon Covid by id
&lt;p&gt;Get Simon Covid by id.&lt;/p&gt;&lt;p&gt;Let&#39;s put Covid99 stuff here&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;SimonCovid&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20016SimonCovidList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingleSimonCovid(ctx context.Context) (InlineResponse20016SimonCovidList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20016SimonCovidList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/SimonCovid/SIMON_COVID_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016SimonCovidList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Customer Cars by id
&lt;p&gt;Get Customer Cars by id.&lt;/p&gt;&lt;p&gt;The car the customer arrived in&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;customer_identifier: description of &lt;strong&gt;customer_identifier&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;manufacturer: description of &lt;strong&gt;manufacturer&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;customer_cars&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20023CustomerCarsList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSinglecustomerCars(ctx context.Context) (InlineResponse20023CustomerCarsList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20023CustomerCarsList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/customer_cars/CUSTOMER_CARS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20023CustomerCarsList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Sustrans by id
&lt;p&gt;Get Sustrans by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;sustrans&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20025SustransList
*/
func (a *DynamicEntityApiService) DynamicEntityGetSinglesustrans(ctx context.Context) (InlineResponse20025SustransList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20025SustransList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sustrans/SUSTRANS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20025SustransList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Test1 by id
&lt;p&gt;Get Test1 by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20026Test1List
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingletest1(ctx context.Context) (InlineResponse20026Test1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20026Test1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test1/TEST1_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20026Test1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Test Daniel707 by id
&lt;p&gt;Get Test Daniel707 by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityGetSingletestDaniel707(ctx context.Context) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Customer Cars List
&lt;p&gt;Get Customer Cars List.&lt;/p&gt;&lt;p&gt;The car the customer arrived in&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;customer_identifier: description of &lt;strong&gt;customer_identifier&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;manufacturer: description of &lt;strong&gt;manufacturer&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;customer_cars&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /customer_cars?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20023
*/
func (a *DynamicEntityApiService) DynamicEntityGetcustomerCarsList(ctx context.Context) (InlineResponse20023, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20023
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/customer_cars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20023
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Sustrans List
&lt;p&gt;Get Sustrans List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;sustrans&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /sustrans?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20025
*/
func (a *DynamicEntityApiService) DynamicEntityGetsustransList(ctx context.Context) (InlineResponse20025, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20025
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sustrans"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20025
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Test1 List
&lt;p&gt;Get Test1 List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /test1?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20026
*/
func (a *DynamicEntityApiService) DynamicEntityGettest1List(ctx context.Context) (InlineResponse20026, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20026
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test1"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20026
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Get Test Daniel707 List
&lt;p&gt;Get Test Daniel707 List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /test_daniel707?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024
*/
func (a *DynamicEntityApiService) DynamicEntityGettestDaniel707List(ctx context.Context) (InlineResponse20024, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Covid APIDays
&lt;p&gt;Update Covid APIDays.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;CovidAPIDays&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20013CovidApiDaysList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateCovidAPIDays(ctx context.Context, body Body7) (InlineResponse20013CovidApiDaysList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20013CovidApiDaysList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/CovidAPIDays/COVID_API_DAYS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20013CovidApiDaysList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update D Entity1
&lt;p&gt;Update D Entity1.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;D-Entity1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20017Dentity1List
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateDEntity1Gh29Uk(ctx context.Context, body Body19) (InlineResponse20017Dentity1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20017Dentity1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/D-Entity1/D-ENTITY1_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20017Dentity1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Fish Port
&lt;p&gt;Update Fish Port.&lt;/p&gt;&lt;p&gt;Portfolio of fishbased values&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;fish: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FishPort&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20014FishPortList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateFishPort(ctx context.Context, body Body10) (InlineResponse20014FishPortList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20014FishPortList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FishPort/FISH_PORT_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20014FishPortList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Foo Bar
&lt;p&gt;Update Foo Bar.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;FooBar&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20015FooBarList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateFooBar(ctx context.Context, body Body13) (InlineResponse20015FooBarList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20015FooBarList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/FooBar/FOO_BAR_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20015FooBarList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Insurance Policy
&lt;p&gt;Update Insurance Policy.&lt;/p&gt;&lt;p&gt;Which insurance policies the customer already has.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePolicy&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20018InsurancePolicyList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateInsurancePolicyGh29Uk(ctx context.Context, body Body22) (InlineResponse20018InsurancePolicyList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20018InsurancePolicyList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePolicy/INSURANCE_POLICY_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20018InsurancePolicyList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Insurance Premium
&lt;p&gt;Update Insurance Premium.&lt;/p&gt;&lt;p&gt;Retrive the premium for the customer.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;InsurancePremium&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20019InsurancePremiumList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateInsurancePremiumGh29Uk(ctx context.Context, body Body25) (InlineResponse20019InsurancePremiumList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20019InsurancePremiumList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/InsurancePremium/INSURANCE_PREMIUM_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20019InsurancePremiumList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update March Hare
&lt;p&gt;Update March Hare.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;MarchHare&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20020MarchHareList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateMarchHareGh29Uk(ctx context.Context, body Body28) (InlineResponse20020MarchHareList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20020MarchHareList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/MarchHare/MARCH_HARE_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20020MarchHareList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update My Test Daniel707
&lt;p&gt;Update My Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateMytestDaniel707(ctx context.Context, body Body40) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Obp Activity
&lt;p&gt;Update Obp Activity.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;username: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;created_date: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;ObpActivity&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20022ObpActivityList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateObpActivityObpTesting01(ctx context.Context, body Body34) (InlineResponse20022ObpActivityList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20022ObpActivityList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/obp.testing.01/ObpActivity/OBP_ACTIVITY_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20022ObpActivityList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Odometer
&lt;p&gt;Update Odometer.&lt;/p&gt;&lt;p&gt;Verify odometer information for flexible contracts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;Odometer&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20021OdometerList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateOdometerGh29Uk(ctx context.Context, body Body31) (InlineResponse20021OdometerList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20021OdometerList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/banks/gh.29.uk/Odometer/ODOMETER_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20021OdometerList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Simon Covid
&lt;p&gt;Update Simon Covid.&lt;/p&gt;&lt;p&gt;Let&#39;s put Covid99 stuff here&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;SimonCovid&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20016SimonCovidList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdateSimonCovid(ctx context.Context, body Body16) (InlineResponse20016SimonCovidList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20016SimonCovidList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/SimonCovid/SIMON_COVID_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20016SimonCovidList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Customer Cars
&lt;p&gt;Update Customer Cars.&lt;/p&gt;&lt;p&gt;The car the customer arrived in&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;customer_identifier: description of &lt;strong&gt;customer_identifier&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;manufacturer: description of &lt;strong&gt;manufacturer&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;customer_cars&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20023CustomerCarsList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdatecustomerCars(ctx context.Context, body Body37) (InlineResponse20023CustomerCarsList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20023CustomerCarsList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/customer_cars/CUSTOMER_CARS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20023CustomerCarsList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Sustrans
&lt;p&gt;Update Sustrans.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;sustrans&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20025SustransList
*/
func (a *DynamicEntityApiService) DynamicEntityUpdatesustrans(ctx context.Context, body Body43) (InlineResponse20025SustransList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20025SustransList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/sustrans/SUSTRANS_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20025SustransList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Test1
&lt;p&gt;Update Test1.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test1&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20026Test1List
*/
func (a *DynamicEntityApiService) DynamicEntityUpdatetest1(ctx context.Context, body Body46) (InlineResponse20026Test1List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20026Test1List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test1/TEST1_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20026Test1List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityApiService Update Test Daniel707
&lt;p&gt;Update Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *DynamicEntityApiService) DynamicEntityUpdatetestDaniel707(ctx context.Context, body Body49) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
