/*
 * Open Bank Project API
 *
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2024. Licensed under the AGPL and commercial licences.
 *
 * API version: v5.1.0
 * Contact: contact@tesobe.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package obp_golang

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type TestDaniel707ApiService service

/*
TestDaniel707ApiService Create new My Test Daniel707
&lt;p&gt;Create new My Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityCreateMytestDaniel707(ctx context.Context, body Body39) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Create new Test Daniel707
&lt;p&gt;Create new Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityCreatetestDaniel707(ctx context.Context, body Body48) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Delete My Test Daniel707 by id
&lt;p&gt;Delete My Test Daniel707 by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityDeleteMytestDaniel707(ctx context.Context, body Body41) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Delete Test Daniel707 by id
&lt;p&gt;Delete Test Daniel707 by id&lt;/p&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityDeletetestDaniel707(ctx context.Context, body Body50) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 204 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Get My Test Daniel707 List
&lt;p&gt;Get My Test Daniel707 List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /test_daniel707?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024
*/
func (a *TestDaniel707ApiService) DynamicEntityGetMytestDaniel707List(ctx context.Context) (InlineResponse20024, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Get My Test Daniel707 by id
&lt;p&gt;Get My Test Daniel707 by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityGetSingleMytestDaniel707(ctx context.Context) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Get Test Daniel707 by id
&lt;p&gt;Get Test Daniel707 by id.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityGetSingletestDaniel707(ctx context.Context) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Get Test Daniel707 List
&lt;p&gt;Get Test Daniel707 List.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Can do filter on the fields&lt;br /&gt;e.g: /test_daniel707?name&#x3D;James%20Brown&amp;amp;number&#x3D;123.456&amp;amp;number&#x3D;11.11&lt;br /&gt;Will do filter by this rule: name &#x3D;&#x3D; &amp;quot;James Brown&amp;quot; &amp;amp;&amp;amp; (number&#x3D;&#x3D;123.456 || number&#x3D;11.11)&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse20024
*/
func (a *TestDaniel707ApiService) DynamicEntityGettestDaniel707List(ctx context.Context) (InlineResponse20024, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Update My Test Daniel707
&lt;p&gt;Update My Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityUpdateMytestDaniel707(ctx context.Context, body Body40) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/my/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TestDaniel707ApiService Update Test Daniel707
&lt;p&gt;Update Test Daniel707.&lt;/p&gt;&lt;p&gt;Description of this entity, can be markdown text.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Property List:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;name: description of &lt;strong&gt;name&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;li&gt;number: description of &lt;strong&gt;number&lt;/strong&gt; field, can be markdown text.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MethodRouting settings example:&lt;/p&gt;&lt;details&gt;&lt;pre&gt;&lt;code&gt;{  &amp;quot;is_bank_id_exact_match&amp;quot;:false,  &amp;quot;method_name&amp;quot;:&amp;quot;dynamicEntityProcess&amp;quot;,  &amp;quot;connector_name&amp;quot;:&amp;quot;rest_vMar2019&amp;quot;,  &amp;quot;bank_id_pattern&amp;quot;:&amp;quot;.*&amp;quot;,  &amp;quot;parameters&amp;quot;:[    {        &amp;quot;key&amp;quot;:&amp;quot;entityName&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;test_daniel707&amp;quot;    }    {        &amp;quot;key&amp;quot;:&amp;quot;url&amp;quot;,        &amp;quot;value&amp;quot;:&amp;quot;http://mydomain.com/xxx&amp;quot;    }  ]}&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body JObject object that needs to be added.

@return InlineResponse20024TestDaniel707List
*/
func (a *TestDaniel707ApiService) DynamicEntityUpdatetestDaniel707(ctx context.Context, body Body49) (InlineResponse20024TestDaniel707List, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse20024TestDaniel707List
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/test_daniel707/TEST_DANIEL707_ID"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse20024TestDaniel707List
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
