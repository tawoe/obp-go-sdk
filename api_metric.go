/*
 * Open Bank Project API
 *
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2024. Licensed under the AGPL and commercial licences.
 *
 * API version: v5.1.0
 * Contact: contact@tesobe.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package obp_golang

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type MetricApiService service

/*
MetricApiService Search API Metrics via Elasticsearch
&lt;p&gt;Search the API calls made to this API instance via Elastic Search.&lt;/p&gt;&lt;p&gt;Login is required.&lt;/p&gt;&lt;p&gt;CanSearchMetrics entitlement is required to search metrics data.&lt;/p&gt;&lt;p&gt;parameters:&lt;/p&gt;&lt;p&gt;esType  - elasticsearch type&lt;/p&gt;&lt;p&gt;simple query:&lt;/p&gt;&lt;p&gt;q       - plain_text_query&lt;/p&gt;&lt;p&gt;df      - default field to search&lt;/p&gt;&lt;p&gt;sort    - field to sort on&lt;/p&gt;&lt;p&gt;size    - number of hits returned, default 10&lt;/p&gt;&lt;p&gt;from    - show hits starting from&lt;/p&gt;&lt;p&gt;json query:&lt;/p&gt;&lt;p&gt;source  - JSON_query_(URL-escaped)&lt;/p&gt;&lt;p&gt;example usage:&lt;/p&gt;&lt;p&gt;/search/metrics/q&#x3D;findThis&lt;/p&gt;&lt;p&gt;or:&lt;/p&gt;&lt;p&gt;/search/metrics/source&#x3D;{&amp;quot;query&amp;quot;:{&amp;quot;query_string&amp;quot;:{&amp;quot;query&amp;quot;:&amp;quot;findThis&amp;quot;}}}&lt;/p&gt;&lt;p&gt;Note!!&lt;/p&gt;&lt;p&gt;The whole JSON query string MUST be URL-encoded:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;For {  use %7B&lt;/li&gt;&lt;li&gt;For }  use %7D&lt;/li&gt;&lt;li&gt;For : use %3A&lt;/li&gt;&lt;li&gt;For &amp;quot; use %22&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;etc..&lt;/p&gt;&lt;p&gt;Only q, source and esType are passed to Elastic&lt;/p&gt;&lt;p&gt;Elastic simple query: &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html\&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-uri-request.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Elastic JSON query: &lt;a href&#x3D;\&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html\&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-filter-context.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body EmptyClassJson object that needs to be added.

@return EmptyClassJson
*/
func (a *MetricApiService) ElasticSearchMetrics(ctx context.Context, body EmptyClassJson) (EmptyClassJson, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue EmptyClassJson
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/search/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v EmptyClassJson
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
MetricApiService Get Aggregate Metrics
&lt;p&gt;Returns aggregate metrics on api usage eg. total count, response time (in ms), etc.&lt;/p&gt;&lt;p&gt;Should be able to filter on the following fields&lt;/p&gt;&lt;p&gt;eg: /management/aggregate-metrics?from_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;to_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;consumer_id&#x3D;5&lt;br /&gt;&amp;amp;user_id&#x3D;66214b8e-259e-44ad-8868-3eb47be70646&amp;amp;implemented_by_partial_function&#x3D;getTransactionsForBankAccount&lt;br /&gt;&amp;amp;implemented_in_version&#x3D;v3.0.0&amp;amp;url&#x3D;/obp/v3.0.0/banks/gh.29.uk/accounts/8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0/owner/transactions&lt;br /&gt;&amp;amp;verb&#x3D;GET&amp;amp;anon&#x3D;false&amp;amp;app_name&#x3D;MapperPostman&lt;br /&gt;&amp;amp;exclude_app_names&#x3D;API-EXPLORER,API-Manager,SOFI,null&lt;/p&gt;&lt;p&gt;1 from_date (defaults to the day before the current date): eg:from_date&#x3D;1100-01-01T01:01:01.000Z&lt;/p&gt;&lt;p&gt;2 to_date (defaults to the current date) eg:to_date&#x3D;1100-01-01T01:01:01.000Z&lt;/p&gt;&lt;p&gt;3 consumer_id  (if null ignore)&lt;/p&gt;&lt;p&gt;4 user_id (if null ignore)&lt;/p&gt;&lt;p&gt;5 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)&lt;/p&gt;&lt;p&gt;6 url (if null ignore), note: can not contain &#39;&amp;amp;&#39;.&lt;/p&gt;&lt;p&gt;7 app_name (if null ignore)&lt;/p&gt;&lt;p&gt;8 implemented_by_partial_function (if null ignore),&lt;/p&gt;&lt;p&gt;9 implemented_in_version (if null ignore)&lt;/p&gt;&lt;p&gt;10 verb (if null ignore)&lt;/p&gt;&lt;p&gt;11 correlation_id (if null ignore)&lt;/p&gt;&lt;p&gt;12 include_app_names (if null ignore).eg: &amp;amp;include_app_names&#x3D;API-EXPLORER,API-Manager,SOFI,null&lt;/p&gt;&lt;p&gt;13 include_url_patterns (if null ignore).you can design you own SQL LIKE pattern. eg: &amp;amp;include_url_patterns&#x3D;%management/metrics%,%management/aggregate-metrics%&lt;/p&gt;&lt;p&gt;14 include_implemented_by_partial_functions (if null ignore).eg: &amp;amp;include_implemented_by_partial_functions&#x3D;getMetrics,getConnectorMetrics,getAggregateMetrics&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return AggregateMetricJson
*/
func (a *MetricApiService) GetAggregateMetrics(ctx context.Context) (AggregateMetricJson, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue AggregateMetricJson
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/aggregate-metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v AggregateMetricJson
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
MetricApiService Get Connector Metrics
&lt;p&gt;Get the all metrics&lt;/p&gt;&lt;p&gt;require CanGetConnectorMetrics role&lt;/p&gt;&lt;p&gt;Filters Part 1.&lt;em&gt;filtering&lt;/em&gt; (no wilde cards etc.) parameters to GET /management/connector/metrics&lt;/p&gt;&lt;p&gt;Should be able to filter on the following metrics fields&lt;/p&gt;&lt;p&gt;eg: /management/connector/metrics?from_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;to_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;limit&#x3D;50&amp;amp;offset&#x3D;2&lt;/p&gt;&lt;p&gt;1 from_date (defaults to one week before current date): eg:from_date&#x3D;1100-01-01T01:01:01.000Z&lt;/p&gt;&lt;p&gt;2 to_date (defaults to current date) eg:to_date&#x3D;1100-01-01T01:01:01.000Z&lt;/p&gt;&lt;p&gt;3 limit (for pagination: defaults to 1000)  eg:limit&#x3D;2000&lt;/p&gt;&lt;p&gt;4 offset (for pagination: zero index, defaults to 0) eg: offset&#x3D;10&lt;/p&gt;&lt;p&gt;eg: /management/connector/metrics?from_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;to_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;limit&#x3D;100&amp;amp;offset&#x3D;300&lt;/p&gt;&lt;p&gt;Other filters:&lt;/p&gt;&lt;p&gt;5 connector_name  (if null ignore)&lt;/p&gt;&lt;p&gt;6 function_name (if null ignore)&lt;/p&gt;&lt;p&gt;7 correlation_id (if null ignore)&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body EmptyClassJson object that needs to be added.

@return ConnectorMetricsJson
*/
func (a *MetricApiService) GetConnectorMetrics(ctx context.Context, body EmptyClassJson) (ConnectorMetricsJson, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ConnectorMetricsJson
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/connector/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ConnectorMetricsJson
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorInvalidDateFormat
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
MetricApiService Get Metrics
&lt;p&gt;Get API metrics rows. These are records of each REST API call.&lt;/p&gt;&lt;p&gt;require CanReadMetrics role&lt;/p&gt;&lt;p&gt;Filters Part 1.&lt;em&gt;filtering&lt;/em&gt; (no wilde cards etc.) parameters to GET /management/metrics&lt;/p&gt;&lt;p&gt;You can filter by the following fields by applying url parameters&lt;/p&gt;&lt;p&gt;eg: /management/metrics?from_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;to_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;limit&#x3D;50&amp;amp;offset&#x3D;2&lt;/p&gt;&lt;p&gt;1 from_date e.g.:from_date&#x3D;1100-01-01T01:01:01.000Z Defaults to the Unix Epoch i.e. Thu Jan 01 00:00:00 UTC 1970&lt;/p&gt;&lt;p&gt;2 to_date e.g.:to_date&#x3D;1100-01-01T01:01:01.000Z Defaults to a far future date i.e. Sat Jan 01 00:00:00 UTC 4000&lt;/p&gt;&lt;p&gt;Note: it is recommended you send a valid from_date (e.g. 5 seconds ago) and to_date (now + 1 second) if you want to get the latest records&lt;br /&gt;Otherwise you may receive stale cached results.&lt;/p&gt;&lt;p&gt;3 limit (for pagination: defaults to 50)  eg:limit&#x3D;200&lt;/p&gt;&lt;p&gt;4 offset (for pagination: zero index, defaults to 0) eg: offset&#x3D;10&lt;/p&gt;&lt;p&gt;5 sort_by (defaults to date field) eg: sort_by&#x3D;date&lt;br /&gt;possible values:&lt;br /&gt;&amp;quot;url&amp;quot;,&lt;br /&gt;&amp;quot;date&amp;quot;,&lt;br /&gt;&amp;quot;user_name&amp;quot;,&lt;br /&gt;&amp;quot;app_name&amp;quot;,&lt;br /&gt;&amp;quot;developer_email&amp;quot;,&lt;br /&gt;&amp;quot;implemented_by_partial_function&amp;quot;,&lt;br /&gt;&amp;quot;implemented_in_version&amp;quot;,&lt;br /&gt;&amp;quot;consumer_id&amp;quot;,&lt;br /&gt;&amp;quot;verb&amp;quot;&lt;/p&gt;&lt;p&gt;6 direction (defaults to date desc) eg: direction&#x3D;desc&lt;/p&gt;&lt;p&gt;eg: /management/metrics?from_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;to_date&#x3D;1100-01-01T01:01:&lt;a href&#x3D;\&quot;&amp;#x6d;a&amp;#x69;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x30;1&amp;#x2e;&amp;#x30;&amp;#48;&amp;#x30;Z&amp;#38;&amp;#108;&amp;#105;&amp;#109;&amp;#x69;&amp;#116;&amp;#61;&amp;#x31;&amp;#x30;&amp;#x30;0&amp;#x30;&amp;#38;&amp;#111;&amp;#102;&amp;#102;&amp;#x73;&amp;#101;t&amp;#x3d;&amp;#x30;&amp;amp;a&amp;#x6e;&amp;#x6f;n&amp;#x3d;&amp;#x66;a&amp;#108;&amp;#115;&amp;#101;&amp;#38;&amp;#97;&amp;#x70;&amp;#112;&amp;#95;&amp;#110;&amp;#97;&amp;#109;&amp;#x65;&amp;#61;&amp;#x54;&amp;#101;&amp;#97;&amp;#116;A&amp;#x70;&amp;#x70;&amp;#38;&amp;#x69;&amp;#x6d;&amp;#112;&amp;#108;&amp;#x65;&amp;#x6d;en&amp;#x74;&amp;#x65;d&amp;#x5f;&amp;#105;&amp;#x6e;_&amp;#118;&amp;#101;&amp;#114;&amp;#x73;&amp;#105;&amp;#111;n&amp;#x3d;&amp;#x76;2&amp;#46;&amp;#49;.&amp;#48;&amp;amp;&amp;#118;&amp;#x65;&amp;#114;&amp;#x62;&amp;#61;&amp;#x50;&amp;#79;&amp;#83;&amp;#84;&amp;#x26;&amp;#x75;&amp;#115;e&amp;#x72;&amp;#95;&amp;#x69;&amp;#x64;&amp;#x3d;&amp;#99;&amp;#x37;&amp;#98;&amp;#54;&amp;#99;&amp;#x62;&amp;#52;7&amp;#x2d;&amp;#99;&amp;#x62;&amp;#x39;&amp;#x36;&amp;#x2d;4&amp;#x34;&amp;#52;1&amp;#45;&amp;#56;&amp;#x38;&amp;#48;1&amp;#x2d;&amp;#x33;&amp;#53;&amp;#x62;&amp;#53;&amp;#x37;45&amp;#x36;&amp;#55;&amp;#x35;&amp;#51;a&amp;#x26;&amp;#117;&amp;#x73;&amp;#x65;&amp;#114;&amp;#x5f;n&amp;#97;&amp;#109;e&amp;#61;&amp;#x73;u&amp;#x73;&amp;#97;n&amp;#x2e;&amp;#x75;&amp;#107;&amp;#46;&amp;#x32;&amp;#x39;&amp;#x40;e&amp;#120;&amp;#97;&amp;#109;p&amp;#x6c;&amp;#101;&amp;#x2e;&amp;#99;&amp;#111;&amp;#x6d;\&quot;&gt;&amp;#x30;&amp;#49;&amp;#46;&amp;#x30;&amp;#48;&amp;#48;&amp;#x5a;&amp;#38;&amp;#108;&amp;#x69;m&amp;#105;&amp;#116;&#x3D;&amp;#x31;0&amp;#48;&amp;#48;&amp;#x30;&amp;#x26;&amp;#111;&amp;#102;&amp;#x66;&amp;#115;&amp;#x65;&amp;#x74;&amp;#x3d;&amp;#x30;&amp;#38;&amp;#97;&amp;#x6e;&amp;#x6f;n&amp;#x3d;&amp;#102;&amp;#97;&amp;#x6c;&amp;#115;&amp;#101;&amp;amp;&amp;#97;&amp;#x70;&amp;#112;&amp;#x5f;&amp;#110;&amp;#x61;m&amp;#x65;&amp;#x3d;&amp;#84;&amp;#x65;&amp;#x61;&amp;#x74;&amp;#65;&amp;#x70;&amp;#x70;&amp;#38;&amp;#x69;&amp;#109;p&amp;#108;e&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#116;&amp;#101;&amp;#100;&amp;#95;&amp;#105;&amp;#110;_&amp;#118;&amp;#x65;&amp;#114;&amp;#x73;&amp;#x69;o&amp;#x6e;&amp;#x3d;&amp;#x76;&amp;#50;.&amp;#x31;&amp;#x2e;&amp;#48;&amp;#x26;&amp;#x76;&amp;#101;&amp;#114;&amp;#x62;&amp;#x3d;&amp;#80;&amp;#79;&amp;#83;T&amp;#x26;&amp;#117;&amp;#x73;e&amp;#x72;&amp;#x5f;&amp;#105;&amp;#100;&amp;#61;&amp;#99;&amp;#x37;&amp;#98;&amp;#x36;&amp;#99;&amp;#x62;&amp;#52;7&amp;#x2d;&amp;#99;&amp;#98;9&amp;#x36;&amp;#x2d;&amp;#x34;&amp;#52;&amp;#52;1&amp;#45;&amp;#x38;80&amp;#49;&amp;#x2d;&amp;#51;&amp;#x35;&amp;#98;&amp;#x35;7&amp;#52;&amp;#53;&amp;#x36;&amp;#x37;&amp;#53;&amp;#x33;&amp;#97;&amp;amp;&amp;#117;&amp;#x73;e&amp;#114;&amp;#x5f;&amp;#x6e;a&amp;#x6d;&amp;#x65;&#x3D;&amp;#115;&amp;#117;&amp;#x73;&amp;#97;&amp;#x6e;&amp;#x2e;&amp;#117;&amp;#x6b;&amp;#46;2&amp;#57;&amp;#x40;&amp;#101;&amp;#120;&amp;#x61;m&amp;#x70;&amp;#x6c;&amp;#101;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;amp;consumer_id&#x3D;78&lt;/p&gt;&lt;p&gt;Other filters:&lt;/p&gt;&lt;p&gt;7 consumer_id  (if null ignore)&lt;/p&gt;&lt;p&gt;8 user_id (if null ignore)&lt;/p&gt;&lt;p&gt;9 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)&lt;/p&gt;&lt;p&gt;10 url (if null ignore), note: can not contain &#39;&amp;amp;&#39;.&lt;/p&gt;&lt;p&gt;11 app_name (if null ignore)&lt;/p&gt;&lt;p&gt;12 implemented_by_partial_function (if null ignore),&lt;/p&gt;&lt;p&gt;13 implemented_in_version (if null ignore)&lt;/p&gt;&lt;p&gt;14 verb (if null ignore)&lt;/p&gt;&lt;p&gt;15 correlation_id (if null ignore)&lt;/p&gt;&lt;p&gt;16 duration (if null ignore) non digit chars will be silently omitted&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body EmptyClassJson object that needs to be added.

@return MetricsJsonV510
*/
func (a *MetricApiService) GetMetrics(ctx context.Context, body EmptyClassJson) (MetricsJsonV510, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue MetricsJsonV510
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v MetricsJsonV510
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
MetricApiService Get Metrics at Bank
&lt;p&gt;Get the all metrics at the Bank specified by BANK_ID&lt;/p&gt;&lt;p&gt;require CanReadMetrics role&lt;/p&gt;&lt;p&gt;Filters Part 1.&lt;em&gt;filtering&lt;/em&gt; (no wilde cards etc.) parameters to GET /management/metrics&lt;/p&gt;&lt;p&gt;Should be able to filter on the following metrics fields&lt;/p&gt;&lt;p&gt;eg: /management/metrics?from_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;to_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;limit&#x3D;50&amp;amp;offset&#x3D;2&lt;/p&gt;&lt;p&gt;1 from_date (defaults to one week before current date): eg:from_date&#x3D;1100-01-01T01:01:01.000Z&lt;/p&gt;&lt;p&gt;2 to_date (defaults to current date) eg:to_date&#x3D;1100-01-01T01:01:01.000Z&lt;/p&gt;&lt;p&gt;3 limit (for pagination: defaults to 50)  eg:limit&#x3D;200&lt;/p&gt;&lt;p&gt;4 offset (for pagination: zero index, defaults to 0) eg: offset&#x3D;10&lt;/p&gt;&lt;p&gt;5 sort_by (defaults to date field) eg: sort_by&#x3D;date&lt;br /&gt;possible values:&lt;br /&gt;&amp;quot;url&amp;quot;,&lt;br /&gt;&amp;quot;date&amp;quot;,&lt;br /&gt;&amp;quot;user_name&amp;quot;,&lt;br /&gt;&amp;quot;app_name&amp;quot;,&lt;br /&gt;&amp;quot;developer_email&amp;quot;,&lt;br /&gt;&amp;quot;implemented_by_partial_function&amp;quot;,&lt;br /&gt;&amp;quot;implemented_in_version&amp;quot;,&lt;br /&gt;&amp;quot;consumer_id&amp;quot;,&lt;br /&gt;&amp;quot;verb&amp;quot;&lt;/p&gt;&lt;p&gt;6 direction (defaults to date desc) eg: direction&#x3D;desc&lt;/p&gt;&lt;p&gt;eg: /management/metrics?from_date&#x3D;1100-01-01T01:01:01.000Z&amp;amp;to_date&#x3D;1100-01-01T01:01:&lt;a href&#x3D;\&quot;&amp;#109;&amp;#x61;&amp;#x69;lt&amp;#111;&amp;#58;&amp;#x30;&amp;#x31;&amp;#46;&amp;#48;0&amp;#x30;&amp;#90;&amp;#38;&amp;#108;&amp;#x69;&amp;#109;&amp;#x69;&amp;#x74;&#x3D;&amp;#x31;0&amp;#x30;&amp;#x30;&amp;#x30;&amp;amp;&amp;#x6f;&amp;#102;fset&#x3D;&amp;#48;&amp;#x26;&amp;#x61;&amp;#x6e;&amp;#111;&amp;#x6e;&amp;#x3d;&amp;#102;a&amp;#x6c;se&amp;#38;&amp;#97;&amp;#x70;&amp;#x70;&amp;#95;&amp;#110;&amp;#x61;&amp;#x6d;&amp;#x65;&#x3D;&amp;#84;&amp;#101;a&amp;#x74;&amp;#65;&amp;#x70;&amp;#x70;&amp;#38;&amp;#x69;&amp;#109;pl&amp;#101;&amp;#x6d;&amp;#x65;&amp;#110;&amp;#116;&amp;#x65;&amp;#100;&amp;#x5f;&amp;#x69;&amp;#x6e;&amp;#95;ve&amp;#x72;s&amp;#105;&amp;#x6f;&amp;#110;&amp;#61;&amp;#x76;&amp;#50;&amp;#46;&amp;#x31;&amp;#x2e;0&amp;#x26;v&amp;#101;&amp;#x72;&amp;#x62;&amp;#x3d;&amp;#x50;&amp;#79;&amp;#x53;&amp;#x54;&amp;amp;&amp;#117;&amp;#x73;&amp;#101;&amp;#114;&amp;#x5f;&amp;#x69;&amp;#x64;&amp;#61;&amp;#x63;&amp;#x37;b&amp;#54;c&amp;#98;&amp;#x34;&amp;#55;&amp;#45;&amp;#x63;&amp;#x62;&amp;#x39;&amp;#54;&amp;#45;&amp;#52;&amp;#x34;&amp;#x34;&amp;#x31;&amp;#45;&amp;#x38;&amp;#56;0&amp;#49;-35&amp;#98;&amp;#53;&amp;#55;&amp;#x34;&amp;#x35;&amp;#x36;7&amp;#x35;&amp;#51;&amp;#97;&amp;#x26;&amp;#x75;&amp;#115;e&amp;#114;&amp;#x5f;&amp;#110;a&amp;#x6d;&amp;#101;&amp;#x3d;&amp;#x73;&amp;#117;&amp;#x73;&amp;#97;&amp;#110;.uk&amp;#x2e;2&amp;#x39;&amp;#64;ex&amp;#97;&amp;#109;&amp;#112;l&amp;#101;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;\&quot;&gt;&amp;#48;&amp;#x31;&amp;#x2e;&amp;#48;&amp;#x30;0&amp;#90;&amp;#x26;l&amp;#x69;&amp;#x6d;&amp;#105;&amp;#116;&amp;#61;&amp;#x31;&amp;#48;&amp;#x30;&amp;#x30;&amp;#x30;&amp;#38;&amp;#111;&amp;#x66;&amp;#102;s&amp;#101;&amp;#116;&amp;#x3d;&amp;#48;&amp;#x26;&amp;#x61;&amp;#110;o&amp;#110;&amp;#61;fal&amp;#x73;&amp;#x65;&amp;#x26;&amp;#97;&amp;#112;&amp;#x70;&amp;#95;&amp;#x6e;&amp;#97;&amp;#x6d;&amp;#101;&#x3D;&amp;#x54;&amp;#x65;&amp;#x61;&amp;#116;&amp;#65;&amp;#x70;&amp;#112;&amp;#x26;&amp;#x69;&amp;#109;&amp;#x70;&amp;#x6c;&amp;#101;&amp;#x6d;&amp;#x65;&amp;#x6e;&amp;#116;&amp;#x65;&amp;#100;&amp;#95;&amp;#105;&amp;#x6e;&amp;#x5f;&amp;#118;&amp;#101;&amp;#x72;&amp;#115;&amp;#105;o&amp;#x6e;&#x3D;&amp;#x76;2&amp;#x2e;&amp;#x31;.&amp;#48;&amp;#x26;&amp;#118;e&amp;#x72;&amp;#98;&amp;#x3d;&amp;#x50;&amp;#79;&amp;#83;T&amp;#x26;&amp;#x75;&amp;#115;&amp;#101;&amp;#x72;&amp;#95;&amp;#x69;&amp;#100;&#x3D;&amp;#x63;7&amp;#x62;&amp;#x36;cb&amp;#x34;7&amp;#45;c&amp;#98;&amp;#57;&amp;#54;&amp;#x2d;&amp;#x34;&amp;#x34;&amp;#52;&amp;#49;-&amp;#56;8&amp;#x30;&amp;#x31;&amp;#x2d;3&amp;#53;&amp;#x62;57&amp;#52;&amp;#x35;&amp;#54;&amp;#x37;&amp;#53;3&amp;#97;&amp;#38;&amp;#117;&amp;#x73;&amp;#x65;r&amp;#x5f;n&amp;#97;m&amp;#x65;&amp;#61;&amp;#x73;u&amp;#x73;&amp;#x61;&amp;#110;&amp;#46;&amp;#x75;&amp;#107;&amp;#46;&amp;#x32;9&amp;#x40;&amp;#101;x&amp;#97;&amp;#109;&amp;#x70;&amp;#x6c;&amp;#101;&amp;#46;c&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;amp;consumer_id&#x3D;78&lt;/p&gt;&lt;p&gt;Other filters:&lt;/p&gt;&lt;p&gt;7 consumer_id  (if null ignore)&lt;/p&gt;&lt;p&gt;8 user_id (if null ignore)&lt;/p&gt;&lt;p&gt;9 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)&lt;/p&gt;&lt;p&gt;10 url (if null ignore), note: can not contain &#39;&amp;amp;&#39;.&lt;/p&gt;&lt;p&gt;11 app_name (if null ignore)&lt;/p&gt;&lt;p&gt;12 implemented_by_partial_function (if null ignore),&lt;/p&gt;&lt;p&gt;13 implemented_in_version (if null ignore)&lt;/p&gt;&lt;p&gt;14 verb (if null ignore)&lt;/p&gt;&lt;p&gt;15 correlation_id (if null ignore)&lt;/p&gt;&lt;p&gt;16 duration (if null ignore) non digit chars will be silently omitted&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param bANKID The bank id

@return MetricsJson
*/
func (a *MetricApiService) GetMetricsAtBank(ctx context.Context, bANKID string) (MetricsJson, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue MetricsJson
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/metrics/banks/{BANK_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"BANK_ID"+"}", fmt.Sprintf("%v", bANKID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v MetricsJson
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
MetricApiService Get Top Consumers
&lt;p&gt;Get metrics about the top consumers of the API usage e.g. total count, consumer_id and app_name.&lt;/p&gt;&lt;p&gt;Should be able to filter on the following fields&lt;/p&gt;&lt;p&gt;e.g.: /management/metrics/top-consumers?from_date&#x3D;1970-01-01T00:00:00.000Z&amp;amp;to_date&#x3D;2024-02-05T14:15:55.281Z&amp;amp;consumer_id&#x3D;5&lt;br /&gt;&amp;amp;user_id&#x3D;66214b8e-259e-44ad-8868-3eb47be70646&amp;amp;implemented_by_partial_function&#x3D;getTransactionsForBankAccount&lt;br /&gt;&amp;amp;implemented_in_version&#x3D;v3.0.0&amp;amp;url&#x3D;/obp/v3.0.0/banks/gh.29.uk/accounts/8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0/owner/transactions&lt;br /&gt;&amp;amp;verb&#x3D;GET&amp;amp;anon&#x3D;false&amp;amp;app_name&#x3D;MapperPostman&lt;br /&gt;&amp;amp;exclude_app_names&#x3D;API-EXPLORER,API-Manager,SOFI,null&lt;br /&gt;&amp;amp;limit&#x3D;100&lt;/p&gt;&lt;p&gt;1 from_date (defaults to the one year ago): eg:from_date&#x3D;1970-01-01T00:00:00.000Z&lt;/p&gt;&lt;p&gt;2 to_date (defaults to the current date) eg:to_date&#x3D;2024-02-05T14:15:55.282Z&lt;/p&gt;&lt;p&gt;3 consumer_id  (if null ignore)&lt;/p&gt;&lt;p&gt;4 user_id (if null ignore)&lt;/p&gt;&lt;p&gt;5 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)&lt;/p&gt;&lt;p&gt;6 url (if null ignore), note: can not contain &#39;&amp;amp;&#39;.&lt;/p&gt;&lt;p&gt;7 app_name (if null ignore)&lt;/p&gt;&lt;p&gt;8 implemented_by_partial_function (if null ignore),&lt;/p&gt;&lt;p&gt;9 implemented_in_version (if null ignore)&lt;/p&gt;&lt;p&gt;10 verb (if null ignore)&lt;/p&gt;&lt;p&gt;11 correlation_id (if null ignore)&lt;/p&gt;&lt;p&gt;12 duration (if null ignore) non digit chars will be silently omitted&lt;/p&gt;&lt;p&gt;13 exclude_app_names (if null ignore).eg: &amp;amp;exclude_app_names&#x3D;API-EXPLORER,API-Manager,SOFI,null&lt;/p&gt;&lt;p&gt;14 exclude_url_patterns (if null ignore).you can design you own SQL NOT LIKE pattern. eg: &amp;amp;exclude_url_patterns&#x3D;%management/metrics%,%management/aggregate-metrics%&lt;/p&gt;&lt;p&gt;15 exclude_implemented_by_partial_functions (if null ignore).eg: &amp;amp;exclude_implemented_by_partial_functions&#x3D;getMetrics,getConnectorMetrics,getAggregateMetrics&lt;/p&gt;&lt;p&gt;16 limit (for pagination: defaults to 50)  eg:limit&#x3D;200&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return TopConsumersJson
*/
func (a *MetricApiService) GetMetricsTopConsumers(ctx context.Context) (TopConsumersJson, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TopConsumersJson
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/metrics/top-consumers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v TopConsumersJson
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
MetricApiService Get Top APIs
&lt;p&gt;Get metrics about the most popular APIs. e.g.: total count, response time (in ms), etc.&lt;/p&gt;&lt;p&gt;Should be able to filter on the following fields&lt;/p&gt;&lt;p&gt;eg: /management/metrics/top-apis?from_date&#x3D;1970-01-01T00:00:00.000Z&amp;amp;to_date&#x3D;2024-02-05T14:15:55.280Z&amp;amp;consumer_id&#x3D;5&lt;br /&gt;&amp;amp;user_id&#x3D;66214b8e-259e-44ad-8868-3eb47be70646&amp;amp;implemented_by_partial_function&#x3D;getTransactionsForBankAccount&lt;br /&gt;&amp;amp;implemented_in_version&#x3D;v3.0.0&amp;amp;url&#x3D;/obp/v3.0.0/banks/gh.29.uk/accounts/8ca8a7e4-6d02-48e3-a029-0b2bf89de9f0/owner/transactions&lt;br /&gt;&amp;amp;verb&#x3D;GET&amp;amp;anon&#x3D;false&amp;amp;app_name&#x3D;MapperPostman&lt;br /&gt;&amp;amp;exclude_app_names&#x3D;API-EXPLORER,API-Manager,SOFI,null&lt;/p&gt;&lt;p&gt;1 from_date (defaults to the one year ago): eg:from_date&#x3D;1970-01-01T00:00:00.000Z&lt;/p&gt;&lt;p&gt;2 to_date (defaults to the current date) eg:to_date&#x3D;2024-02-05T14:15:55.280Z&lt;/p&gt;&lt;p&gt;3 consumer_id  (if null ignore)&lt;/p&gt;&lt;p&gt;4 user_id (if null ignore)&lt;/p&gt;&lt;p&gt;5 anon (if null ignore) only support two value : true (return where user_id is null.) or false (return where user_id is not null.)&lt;/p&gt;&lt;p&gt;6 url (if null ignore), note: can not contain &#39;&amp;amp;&#39;.&lt;/p&gt;&lt;p&gt;7 app_name (if null ignore)&lt;/p&gt;&lt;p&gt;8 implemented_by_partial_function (if null ignore),&lt;/p&gt;&lt;p&gt;9 implemented_in_version (if null ignore)&lt;/p&gt;&lt;p&gt;10 verb (if null ignore)&lt;/p&gt;&lt;p&gt;11 correlation_id (if null ignore)&lt;/p&gt;&lt;p&gt;12 duration (if null ignore) non digit chars will be silently omitted&lt;/p&gt;&lt;p&gt;13 exclude_app_names (if null ignore).eg: &amp;amp;exclude_app_names&#x3D;API-EXPLORER,API-Manager,SOFI,null&lt;/p&gt;&lt;p&gt;14 exclude_url_patterns (if null ignore).you can design you own SQL NOT LIKE pattern. eg: &amp;amp;exclude_url_patterns&#x3D;%management/metrics%,%management/aggregate-metrics%&lt;/p&gt;&lt;p&gt;15 exclude_implemented_by_partial_functions (if null ignore).eg: &amp;amp;exclude_implemented_by_partial_functions&#x3D;getMetrics,getConnectorMetrics,getAggregateMetrics&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return TopApisJson
*/
func (a *MetricApiService) GetTopAPIs(ctx context.Context) (TopApisJson, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TopApisJson
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/metrics/top-apis"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v TopApisJson
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
