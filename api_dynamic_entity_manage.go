/*
 * Open Bank Project API
 *
 * An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2024. Licensed under the AGPL and commercial licences.
 *
 * API version: v5.1.0
 * Contact: contact@tesobe.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package obp_golang

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type DynamicEntityManageApiService service

/*
DynamicEntityManageApiService Create Bank Level Dynamic Entity
&lt;p&gt;Create a Bank Level DynamicEntity.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Create a DynamicEntity. If creation is successful, the corresponding POST, GET, PUT and DELETE (Create, Read, Update, Delete or CRUD for short) endpoints will be generated automatically&lt;/p&gt;&lt;p&gt;The following field types are as supported:&lt;br /&gt;[number, integer, boolean, string, DATE_WITH_DAY, reference]&lt;/p&gt;&lt;p&gt;The DATE_WITH_DAY format is: yyyy-MM-dd&lt;/p&gt;&lt;p&gt;Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..&lt;br /&gt;The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;someField0&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FishPort&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField1&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FooBar&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField2&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:sustrans&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField3&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:SimonCovid&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField4&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CovidAPIDays&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField5&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:customer_cars&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField6&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MarchHare&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField7&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePolicy&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField8&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Odometer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField9&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePremium&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField10&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ObpActivity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField11&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField12&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:D-Entity1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField13&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test_daniel707&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField14&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Bank&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField15&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Consumer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField16&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Customer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField17&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MethodRouting&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField18&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:DynamicEntity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField19&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionRequest&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField20&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ProductAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField21&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField22&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField23&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CustomerAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField24&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountApplication&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField25&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CardAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField26&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;e6a6f108-930a-4df8-8c70-68387180b81f&amp;quot;}&amp;quot;someField27&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Branch:bankId&amp;amp;branchId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;e6a6f108-930a-4df8-8c70-68387180b81f&amp;amp;branchId&#x3D;49d57c01-59e8-40b2-b2bd-7acc1b0c3645&amp;quot;}&amp;quot;someField28&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Atm:bankId&amp;amp;atmId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;e6a6f108-930a-4df8-8c70-68387180b81f&amp;amp;atmId&#x3D;49d57c01-59e8-40b2-b2bd-7acc1b0c3645&amp;quot;}&amp;quot;someField29&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:BankAccount:bankId&amp;amp;accountId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;e6a6f108-930a-4df8-8c70-68387180b81f&amp;amp;accountId&#x3D;49d57c01-59e8-40b2-b2bd-7acc1b0c3645&amp;quot;}&amp;quot;someField30&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Product:bankId&amp;amp;productCode&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;e6a6f108-930a-4df8-8c70-68387180b81f&amp;amp;productCode&#x3D;49d57c01-59e8-40b2-b2bd-7acc1b0c3645&amp;quot;}&amp;quot;someField31&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:PhysicalCard:bankId&amp;amp;cardId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;e6a6f108-930a-4df8-8c70-68387180b81f&amp;amp;cardId&#x3D;49d57c01-59e8-40b2-b2bd-7acc1b0c3645&amp;quot;}&amp;quot;someField32&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Transaction:bankId&amp;amp;accountId&amp;amp;transactionId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;e6a6f108-930a-4df8-8c70-68387180b81f&amp;amp;accountId&#x3D;49d57c01-59e8-40b2-b2bd-7acc1b0c3645&amp;amp;transactionId&#x3D;ae582fc1-41e9-49ac-bb84-eace98062292&amp;quot;}&amp;quot;someField33&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty:bankId&amp;amp;accountId&amp;amp;counterpartyId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;e6a6f108-930a-4df8-8c70-68387180b81f&amp;amp;accountId&#x3D;49d57c01-59e8-40b2-b2bd-7acc1b0c3645&amp;amp;counterpartyId&#x3D;ae582fc1-41e9-49ac-bb84-eace98062292&amp;quot;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: if you set &lt;code&gt;hasPersonalEntity&lt;/code&gt; &#x3D; false, then OBP will not generate the CRUD my FooBar endpoints.&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body DynamicEntityFooBar object that needs to be added.
  - @param bANKID The bank id

@return DynamicEntityFooBar
*/
func (a *DynamicEntityManageApiService) CreateBankLevelDynamicEntity(ctx context.Context, body DynamicEntityFooBar, bANKID string) (DynamicEntityFooBar, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue DynamicEntityFooBar
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities"
	localVarPath = strings.Replace(localVarPath, "{"+"BANK_ID"+"}", fmt.Sprintf("%v", bANKID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v DynamicEntityFooBar
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorBankNotFound
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Create System Level Dynamic Entity
&lt;p&gt;Create a system level Dynamic Entity.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Create a DynamicEntity. If creation is successful, the corresponding POST, GET, PUT and DELETE (Create, Read, Update, Delete or CRUD for short) endpoints will be generated automatically&lt;/p&gt;&lt;p&gt;The following field types are as supported:&lt;br /&gt;[number, integer, boolean, string, DATE_WITH_DAY, reference]&lt;/p&gt;&lt;p&gt;The DATE_WITH_DAY format is: yyyy-MM-dd&lt;/p&gt;&lt;p&gt;Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..&lt;br /&gt;See the following list of currently available reference types and examples of how to construct key values correctly. Note: As more Dynamic Entities are created on this instance, this list will grow:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;someField0&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FishPort&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField1&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FooBar&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField2&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:sustrans&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField3&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:SimonCovid&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField4&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CovidAPIDays&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField5&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:customer_cars&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField6&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MarchHare&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField7&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePolicy&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField8&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Odometer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField9&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePremium&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField10&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ObpActivity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField11&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField12&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:D-Entity1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField13&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test_daniel707&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField14&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Bank&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField15&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Consumer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField16&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Customer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField17&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MethodRouting&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField18&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:DynamicEntity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField19&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionRequest&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField20&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ProductAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField21&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField22&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField23&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CustomerAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField24&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountApplication&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField25&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CardAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField26&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;quot;}&amp;quot;someField27&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Branch:bankId&amp;amp;branchId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;amp;branchId&#x3D;44f26efa-35c9-45b2-8951-b78d5638714d&amp;quot;}&amp;quot;someField28&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Atm:bankId&amp;amp;atmId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;amp;atmId&#x3D;44f26efa-35c9-45b2-8951-b78d5638714d&amp;quot;}&amp;quot;someField29&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:BankAccount:bankId&amp;amp;accountId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;amp;accountId&#x3D;44f26efa-35c9-45b2-8951-b78d5638714d&amp;quot;}&amp;quot;someField30&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Product:bankId&amp;amp;productCode&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;amp;productCode&#x3D;44f26efa-35c9-45b2-8951-b78d5638714d&amp;quot;}&amp;quot;someField31&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:PhysicalCard:bankId&amp;amp;cardId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;amp;cardId&#x3D;44f26efa-35c9-45b2-8951-b78d5638714d&amp;quot;}&amp;quot;someField32&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Transaction:bankId&amp;amp;accountId&amp;amp;transactionId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;amp;accountId&#x3D;44f26efa-35c9-45b2-8951-b78d5638714d&amp;amp;transactionId&#x3D;11f9c7eb-5307-4536-8279-bc9c8f1ee94d&amp;quot;}&amp;quot;someField33&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty:bankId&amp;amp;accountId&amp;amp;counterpartyId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;7b95a2c4-0663-49b6-a8a3-59f1221f2933&amp;amp;accountId&#x3D;44f26efa-35c9-45b2-8951-b78d5638714d&amp;amp;counterpartyId&#x3D;11f9c7eb-5307-4536-8279-bc9c8f1ee94d&amp;quot;}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note: if you set &lt;code&gt;hasPersonalEntity&lt;/code&gt; &#x3D; false, then OBP will not generate the CRUD my FooBar endpoints.&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body DynamicEntityFooBar object that needs to be added.

@return DynamicEntityFooBar
*/
func (a *DynamicEntityManageApiService) CreateSystemDynamicEntity(ctx context.Context, body DynamicEntityFooBar) (DynamicEntityFooBar, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue DynamicEntityFooBar
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/system-dynamic-entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v DynamicEntityFooBar
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Delete Bank Level Dynamic Entity
&lt;p&gt;Delete a Bank Level DynamicEntity specified by DYNAMIC_ENTITY_ID.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param dYNAMICENTITYID the dynamic entity id
  - @param bANKID The bank id
*/
func (a *DynamicEntityManageApiService) DeleteBankLevelDynamicEntity(ctx context.Context, dYNAMICENTITYID string, bANKID string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities/{DYNAMIC_ENTITY_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"DYNAMIC_ENTITY_ID"+"}", fmt.Sprintf("%v", dYNAMICENTITYID), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"BANK_ID"+"}", fmt.Sprintf("%v", bANKID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorBankNotFound
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Delete My Dynamic Entity
&lt;p&gt;Delete my DynamicEntity specified by DYNAMIC_ENTITY_ID.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param dYNAMICENTITYID the dynamic entity id
*/
func (a *DynamicEntityManageApiService) DeleteMyDynamicEntity(ctx context.Context, dYNAMICENTITYID string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/my/dynamic-entities/{DYNAMIC_ENTITY_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"DYNAMIC_ENTITY_ID"+"}", fmt.Sprintf("%v", dYNAMICENTITYID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Delete System Level Dynamic Entity
&lt;p&gt;Delete a DynamicEntity specified by DYNAMIC_ENTITY_ID.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param dYNAMICENTITYID the dynamic entity id
*/
func (a *DynamicEntityManageApiService) DeleteSystemDynamicEntity(ctx context.Context, dYNAMICENTITYID string) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/system-dynamic-entities/{DYNAMIC_ENTITY_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"DYNAMIC_ENTITY_ID"+"}", fmt.Sprintf("%v", dYNAMICENTITYID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarHttpResponse, newErr
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Get Bank Level Dynamic Entities
&lt;p&gt;Get all the bank level Dynamic Entities for one bank.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param bANKID The bank id

@return InlineResponse2004
*/
func (a *DynamicEntityManageApiService) GetBankLevelDynamicEntities(ctx context.Context, bANKID string) (InlineResponse2004, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse2004
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities"
	localVarPath = strings.Replace(localVarPath, "{"+"BANK_ID"+"}", fmt.Sprintf("%v", bANKID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2004
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorBankNotFound
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Get My Dynamic Entities
&lt;p&gt;Get all my Dynamic Entities.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse2004
*/
func (a *DynamicEntityManageApiService) GetMyDynamicEntities(ctx context.Context) (InlineResponse2004, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse2004
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/my/dynamic-entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2004
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Get System Dynamic Entities
&lt;p&gt;Get all System Dynamic Entities&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return InlineResponse2004
*/
func (a *DynamicEntityManageApiService) GetSystemDynamicEntities(ctx context.Context) (InlineResponse2004, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue InlineResponse2004
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/system-dynamic-entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v InlineResponse2004
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Update Bank Level Dynamic Entity
&lt;p&gt;Update a Bank Level DynamicEntity.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Update one DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.&lt;/p&gt;&lt;p&gt;The following field types are as supported:&lt;br /&gt;[number, integer, boolean, string, DATE_WITH_DAY, reference]&lt;/p&gt;&lt;p&gt;DATE_WITH_DAY format: yyyy-MM-dd&lt;/p&gt;&lt;p&gt;Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..&lt;br /&gt;The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;someField0&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FishPort&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField1&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FooBar&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField2&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:sustrans&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField3&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:SimonCovid&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField4&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CovidAPIDays&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField5&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:customer_cars&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField6&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MarchHare&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField7&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePolicy&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField8&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Odometer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField9&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePremium&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField10&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ObpActivity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField11&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField12&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:D-Entity1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField13&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test_daniel707&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField14&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Bank&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField15&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Consumer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField16&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Customer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField17&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MethodRouting&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField18&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:DynamicEntity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField19&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionRequest&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField20&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ProductAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField21&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField22&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField23&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CustomerAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField24&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountApplication&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField25&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CardAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField26&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;quot;}&amp;quot;someField27&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Branch:bankId&amp;amp;branchId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;amp;branchId&#x3D;3487733b-59c5-467a-a823-23285c5b88ed&amp;quot;}&amp;quot;someField28&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Atm:bankId&amp;amp;atmId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;amp;atmId&#x3D;3487733b-59c5-467a-a823-23285c5b88ed&amp;quot;}&amp;quot;someField29&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:BankAccount:bankId&amp;amp;accountId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;amp;accountId&#x3D;3487733b-59c5-467a-a823-23285c5b88ed&amp;quot;}&amp;quot;someField30&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Product:bankId&amp;amp;productCode&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;amp;productCode&#x3D;3487733b-59c5-467a-a823-23285c5b88ed&amp;quot;}&amp;quot;someField31&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:PhysicalCard:bankId&amp;amp;cardId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;amp;cardId&#x3D;3487733b-59c5-467a-a823-23285c5b88ed&amp;quot;}&amp;quot;someField32&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Transaction:bankId&amp;amp;accountId&amp;amp;transactionId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;amp;accountId&#x3D;3487733b-59c5-467a-a823-23285c5b88ed&amp;amp;transactionId&#x3D;c870df43-7938-49d1-8b13-d880105b1c4b&amp;quot;}&amp;quot;someField33&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty:bankId&amp;amp;accountId&amp;amp;counterpartyId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;d21c7c48-8ffc-4c3f-8d4d-f4c20432d8bf&amp;amp;accountId&#x3D;3487733b-59c5-467a-a823-23285c5b88ed&amp;amp;counterpartyId&#x3D;c870df43-7938-49d1-8b13-d880105b1c4b&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body DynamicEntityFooBar object that needs to be added.
  - @param dYNAMICENTITYID the dynamic entity id
  - @param bANKID The bank id

@return DynamicEntityFooBar
*/
func (a *DynamicEntityManageApiService) UpdateBankLevelDynamicEntity(ctx context.Context, body DynamicEntityFooBar, dYNAMICENTITYID string, bANKID string) (DynamicEntityFooBar, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue DynamicEntityFooBar
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/banks/{BANK_ID}/dynamic-entities/{DYNAMIC_ENTITY_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"DYNAMIC_ENTITY_ID"+"}", fmt.Sprintf("%v", dYNAMICENTITYID), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"BANK_ID"+"}", fmt.Sprintf("%v", bANKID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v DynamicEntityFooBar
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorBankNotFound
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Update My Dynamic Entity
&lt;p&gt;Update my DynamicEntity.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Update one of my DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.&lt;/p&gt;&lt;p&gt;Current support filed types as follow:&lt;br /&gt;[number, integer, boolean, string, DATE_WITH_DAY, reference]&lt;/p&gt;&lt;p&gt;DATE_WITH_DAY format: yyyy-MM-dd&lt;/p&gt;&lt;p&gt;Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..&lt;br /&gt;The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;someField0&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FishPort&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField1&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FooBar&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField2&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:sustrans&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField3&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:SimonCovid&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField4&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CovidAPIDays&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField5&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:customer_cars&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField6&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MarchHare&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField7&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePolicy&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField8&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Odometer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField9&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePremium&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField10&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ObpActivity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField11&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField12&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:D-Entity1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField13&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test_daniel707&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField14&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Bank&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField15&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Consumer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField16&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Customer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField17&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MethodRouting&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField18&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:DynamicEntity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField19&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionRequest&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField20&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ProductAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField21&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField22&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField23&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CustomerAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField24&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountApplication&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField25&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CardAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField26&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;quot;}&amp;quot;someField27&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Branch:bankId&amp;amp;branchId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;amp;branchId&#x3D;bb989f3d-6fb8-45b7-b60d-c20e6ae9f21f&amp;quot;}&amp;quot;someField28&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Atm:bankId&amp;amp;atmId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;amp;atmId&#x3D;bb989f3d-6fb8-45b7-b60d-c20e6ae9f21f&amp;quot;}&amp;quot;someField29&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:BankAccount:bankId&amp;amp;accountId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;amp;accountId&#x3D;bb989f3d-6fb8-45b7-b60d-c20e6ae9f21f&amp;quot;}&amp;quot;someField30&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Product:bankId&amp;amp;productCode&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;amp;productCode&#x3D;bb989f3d-6fb8-45b7-b60d-c20e6ae9f21f&amp;quot;}&amp;quot;someField31&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:PhysicalCard:bankId&amp;amp;cardId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;amp;cardId&#x3D;bb989f3d-6fb8-45b7-b60d-c20e6ae9f21f&amp;quot;}&amp;quot;someField32&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Transaction:bankId&amp;amp;accountId&amp;amp;transactionId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;amp;accountId&#x3D;bb989f3d-6fb8-45b7-b60d-c20e6ae9f21f&amp;amp;transactionId&#x3D;48e0d625-eae0-4c74-89e6-b99e67e2ab55&amp;quot;}&amp;quot;someField33&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty:bankId&amp;amp;accountId&amp;amp;counterpartyId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;c18a77b4-5d30-4fcb-84a0-dca287871a4f&amp;amp;accountId&#x3D;bb989f3d-6fb8-45b7-b60d-c20e6ae9f21f&amp;amp;counterpartyId&#x3D;48e0d625-eae0-4c74-89e6-b99e67e2ab55&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body DynamicEntityFooBar object that needs to be added.
  - @param dYNAMICENTITYID the dynamic entity id

@return DynamicEntityFooBar
*/
func (a *DynamicEntityManageApiService) UpdateMyDynamicEntity(ctx context.Context, body DynamicEntityFooBar, dYNAMICENTITYID string) (DynamicEntityFooBar, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue DynamicEntityFooBar
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/my/dynamic-entities/{DYNAMIC_ENTITY_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"DYNAMIC_ENTITY_ID"+"}", fmt.Sprintf("%v", dYNAMICENTITYID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v DynamicEntityFooBar
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DynamicEntityManageApiService Update System Level Dynamic Entity
&lt;p&gt;Update a System Level Dynamic Entity.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Update one DynamicEntity, after update finished, the corresponding CRUD endpoints will be changed.&lt;/p&gt;&lt;p&gt;The following field types are as supported:&lt;br /&gt;[number, integer, boolean, string, DATE_WITH_DAY, reference]&lt;/p&gt;&lt;p&gt;DATE_WITH_DAY format: yyyy-MM-dd&lt;/p&gt;&lt;p&gt;Reference types are like foreign keys and composite foreign keys are supported. The value you need to supply as the (composite) foreign key is a UUID (or several UUIDs in the case of a composite key) that match value in another Entity..&lt;br /&gt;The following list shows all the possible reference types in the system with corresponding examples values so you can see how to construct each reference type value.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;someField0&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FishPort&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField1&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:FooBar&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField2&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:sustrans&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField3&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:SimonCovid&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField4&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CovidAPIDays&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField5&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:customer_cars&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField6&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MarchHare&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField7&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePolicy&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField8&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Odometer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField9&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:InsurancePremium&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField10&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ObpActivity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField11&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField12&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:D-Entity1&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField13&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:test_daniel707&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField14&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Bank&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField15&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Consumer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField16&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Customer&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField17&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:MethodRouting&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField18&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:DynamicEntity&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField19&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionRequest&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField20&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:ProductAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField21&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField22&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:TransactionAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField23&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CustomerAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField24&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:AccountApplication&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField25&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:CardAttribute&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField26&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;05e6621b-e445-41fa-b140-699e106aa72a&amp;quot;}&amp;quot;someField27&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Branch:bankId&amp;amp;branchId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;05e6621b-e445-41fa-b140-699e106aa72a&amp;amp;branchId&#x3D;0bcccc1a-68de-4a4c-9082-396f28a65142&amp;quot;}&amp;quot;someField28&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Atm:bankId&amp;amp;atmId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;05e6621b-e445-41fa-b140-699e106aa72a&amp;amp;atmId&#x3D;0bcccc1a-68de-4a4c-9082-396f28a65142&amp;quot;}&amp;quot;someField29&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:BankAccount:bankId&amp;amp;accountId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;05e6621b-e445-41fa-b140-699e106aa72a&amp;amp;accountId&#x3D;0bcccc1a-68de-4a4c-9082-396f28a65142&amp;quot;}&amp;quot;someField30&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Product:bankId&amp;amp;productCode&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;05e6621b-e445-41fa-b140-699e106aa72a&amp;amp;productCode&#x3D;0bcccc1a-68de-4a4c-9082-396f28a65142&amp;quot;}&amp;quot;someField31&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:PhysicalCard:bankId&amp;amp;cardId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;05e6621b-e445-41fa-b140-699e106aa72a&amp;amp;cardId&#x3D;0bcccc1a-68de-4a4c-9082-396f28a65142&amp;quot;}&amp;quot;someField32&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Transaction:bankId&amp;amp;accountId&amp;amp;transactionId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;05e6621b-e445-41fa-b140-699e106aa72a&amp;amp;accountId&#x3D;0bcccc1a-68de-4a4c-9082-396f28a65142&amp;amp;transactionId&#x3D;f83b7548-74c0-4bc7-9f2c-bb195290bf78&amp;quot;}&amp;quot;someField33&amp;quot;: {    &amp;quot;type&amp;quot;: &amp;quot;reference:Counterparty:bankId&amp;amp;accountId&amp;amp;counterpartyId&amp;quot;,    &amp;quot;example&amp;quot;: &amp;quot;bankId&#x3D;05e6621b-e445-41fa-b140-699e106aa72a&amp;amp;accountId&#x3D;0bcccc1a-68de-4a4c-9082-396f28a65142&amp;amp;counterpartyId&#x3D;f83b7548-74c0-4bc7-9f2c-bb195290bf78&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param body DynamicEntityFooBar object that needs to be added.
  - @param dYNAMICENTITYID the dynamic entity id

@return DynamicEntityFooBar
*/
func (a *DynamicEntityManageApiService) UpdateSystemDynamicEntity(ctx context.Context, body DynamicEntityFooBar, dYNAMICENTITYID string) (DynamicEntityFooBar, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue DynamicEntityFooBar
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/obp/v5.1.0/management/system-dynamic-entities/{DYNAMIC_ENTITY_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"DYNAMIC_ENTITY_ID"+"}", fmt.Sprintf("%v", dYNAMICENTITYID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key

		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v DynamicEntityFooBar
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode == 400 {
			var v ErrorUserNotLoggedIn
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
